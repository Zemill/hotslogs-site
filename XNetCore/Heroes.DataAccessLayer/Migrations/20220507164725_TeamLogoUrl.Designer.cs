// <auto-generated />
using System;
using Heroes.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Heroes.DataAccessLayer.Migrations
{
    [DbContext(typeof(HeroesdataContext))]
    [Migration("20220507164725_TeamLogoUrl")]
    partial class TeamLogoUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.AmazonReplacementBucket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte[]>("Blob")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("amazonreplacementbucket");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'@main@'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("blogposts");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.BuildNumber", b =>
                {
                    b.Property<int>("Buildnumber1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("buildnumber")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("Builddate")
                        .HasColumnName("builddate")
                        .HasColumnType("date");

                    b.Property<string>("Version")
                        .HasColumnName("version")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Buildnumber1")
                        .HasName("PRIMARY");

                    b.ToTable("buildnumbers");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.DataUpdate", b =>
                {
                    b.Property<string>("DataEvent")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp");

                    b.HasKey("DataEvent")
                        .HasName("PRIMARY");

                    b.ToTable("dataupdate");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventID")
                        .HasColumnType("int(11)");

                    b.Property<int>("EventGamesPlayed")
                        .HasColumnType("int(11)");

                    b.Property<int?>("EventIdparent")
                        .HasColumnName("EventIDParent")
                        .HasColumnType("int(11)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("EventOrder")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsEnabled")
                        .HasColumnType("bit(1)");

                    b.HasKey("EventId");

                    b.HasIndex("EventIdparent")
                        .HasName("FK_EventIDParent_EventID_idx");

                    b.HasIndex("EventName")
                        .IsUnique()
                        .HasName("EventName_UNIQUE");

                    b.ToTable("event");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.EventTeam", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnName("EventID")
                        .HasColumnType("int(11)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TeamId");

                    b.HasIndex("EventId");

                    b.ToTable("event_team");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.FingerprintDate", b =>
                {
                    b.Property<DateTime?>("_20170827145118")
                        .HasColumnName("2017-08-27 14:51:18")
                        .HasColumnType("datetime");

                    b.Property<string>("_725ba4982728D326B6ac11129c55b212")
                        .HasColumnName("725ba498-2728-d326-b6ac-11129c55b212")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.ToTable("fingerprint_date");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.GroupFinderListing", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("GroupFinderListingTypeId")
                        .HasColumnName("GroupFinderListingTypeID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MmrsearchRadius")
                        .HasColumnName("MMRSearchRadius")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("TimestampExpiration")
                        .HasColumnType("timestamp");

                    b.HasKey("PlayerId")
                        .HasName("PRIMARY");

                    b.HasIndex("GroupFinderListingTypeId")
                        .HasName("IX_GroupFinderListingTypeID");

                    b.HasIndex("TimestampExpiration")
                        .HasName("IX_TimestampExpiration");

                    b.ToTable("groupfinderlisting");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.HeroIconInformation", b =>
                {
                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pkid")
                        .HasColumnType("int(11)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("icon")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'~/Images/Heroes/Portraits/AutoSelect.png'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Pkid")
                        .HasName("PRIMARY");

                    b.ToTable("heroiconinformation");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.HeroTalentInformation", b =>
                {
                    b.Property<string>("Character")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("ReplayBuildFirst")
                        .HasColumnType("int(11)");

                    b.Property<int>("TalentId")
                        .HasColumnName("TalentID")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReplayBuildLast")
                        .HasColumnType("int(11)");

                    b.Property<string>("TalentDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TalentName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("TalentTier")
                        .HasColumnType("int(11)");

                    b.HasKey("Character", "ReplayBuildFirst", "TalentId")
                        .HasName("PRIMARY");

                    b.HasIndex("Character", "ReplayBuildFirst")
                        .HasName("IX_Character_ReplayBuildFirst");

                    b.HasIndex("Character", "TalentId")
                        .HasName("IX_Character_TalentID");

                    b.HasIndex("ReplayBuildFirst", "ReplayBuildLast")
                        .HasName("IX_ReplayBuildFirst_ReplayBuildLast");

                    b.HasIndex("Character", "ReplayBuildFirst", "ReplayBuildLast")
                        .HasName("IX_Character_ReplayBuildFirst_ReplayBuildLast");

                    b.ToTable("herotalentinformation");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.HotsApiReplay", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("varchar(36)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasColumnName("fingerprint")
                        .HasColumnType("varchar(36)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<DateTime?>("GameDate")
                        .HasColumnName("game_date")
                        .HasColumnType("datetime");

                    b.Property<ushort?>("GameLength")
                        .HasColumnName("game_length")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint?>("GameMapId")
                        .HasColumnName("game_map_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("GameType")
                        .HasColumnName("game_type")
                        .HasColumnType("enum('QuickMatch','UnrankedDraft','HeroLeague','TeamLeague','Brawl','StormLeague')")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("GameVersion")
                        .HasColumnName("game_version")
                        .HasColumnType("varchar(32)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<uint?>("ParsedId")
                        .HasColumnName("parsed_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<sbyte>("Processed")
                        .HasColumnName("processed")
                        .HasColumnType("tinyint(4)");

                    b.Property<byte?>("Region")
                        .HasColumnName("region")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Size")
                        .HasColumnName("size")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasName("replays_created_at_index");

                    b.HasIndex("Filename")
                        .IsUnique()
                        .HasName("replays_filename_unique");

                    b.HasIndex("Fingerprint")
                        .IsUnique()
                        .HasName("replays_fingerprint_v3_index");

                    b.HasIndex("GameDate")
                        .HasName("replays_game_date_index");

                    b.HasIndex("GameType")
                        .HasName("replays_game_type_index");

                    b.HasIndex("ParsedId")
                        .IsUnique()
                        .HasName("replays_parsed_id_uindex");

                    b.HasIndex("Processed", "Deleted")
                        .HasName("replays_processed_deleted_index");

                    b.ToTable("hotsapireplays");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.HotsApiTalent", b =>
                {
                    b.Property<int>("Pkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pkid")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Hero")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Sort")
                        .HasColumnType("int(11)");

                    b.Property<int>("TalentId")
                        .HasColumnName("TalentID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Pkid")
                        .HasName("PRIMARY");

                    b.ToTable("hotsapitalents");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.LeaderboardOptOut", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.HasKey("PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("leaderboardoptout");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.LeaderboardRanking", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("GameMode")
                        .HasColumnType("int(11)");

                    b.Property<int>("CurrentMmr")
                        .HasColumnName("CurrentMMR")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsEligibleForLeaderboard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int?>("LeagueId")
                        .HasColumnName("LeagueID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("LeagueRank")
                        .HasColumnType("int(11)");

                    b.HasKey("PlayerId", "GameMode")
                        .HasName("PRIMARY");

                    b.HasIndex("IsEligibleForLeaderboard")
                        .HasName("IX_IsEligibleForLeaderboard");

                    b.HasIndex("LeagueId")
                        .HasName("IX_LeagueID");

                    b.HasIndex("GameMode", "CurrentMmr")
                        .HasName("IX_GameMode_CurrentMMR");

                    b.HasIndex("LeagueId", "LeagueRank")
                        .HasName("IX_LeagueID_LeagueRank");

                    b.HasIndex("GameMode", "LeagueId", "LeagueRank")
                        .HasName("IX_GameMode_LeagueID_LeagueRank");

                    b.ToTable("leaderboardranking");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LeagueID")
                        .HasColumnType("int(11)");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("RequiredGames")
                        .HasColumnType("int(11)");

                    b.HasKey("LeagueId");

                    b.ToTable("league");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.LocalizationAlias", b =>
                {
                    b.Property<int>("IdentifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdentifierID")
                        .HasColumnType("int");

                    b.Property<string>("AliasesCsv")
                        .IsRequired()
                        .HasColumnName("AliasesCSV")
                        .HasColumnType("varchar(2000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Group")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("NewGroup")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("SubGroup")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("IdentifierId")
                        .HasName("PRIMARY");

                    b.HasIndex("AttributeName")
                        .IsUnique()
                        .HasName("AttributeName_UNIQUE");

                    b.HasIndex("Group")
                        .HasName("IX_Group");

                    b.HasIndex("Type")
                        .HasName("IX_Type");

                    b.ToTable("localizationalias");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.LogError", b =>
                {
                    b.Property<int>("LogErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LogErrorID")
                        .HasColumnType("int");

                    b.Property<string>("AbsoluteUri")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("DateTimeErrorOccurred")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'2020-01-20 13:27:33'");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Referer")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_bin");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("UserHostAddress")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogErrorId");

                    b.HasIndex("DateTimeErrorOccurred")
                        .HasName("IX_DateTimeErrorOccurred");

                    b.HasIndex("UserHostAddress")
                        .HasName("IX_UserHostAddress");

                    b.HasIndex("UserId")
                        .HasName("FK_LogError_my_aspnet_users_idx");

                    b.ToTable("logerror");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.MissingTalent", b =>
                {
                    b.Property<string>("Character")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Build")
                        .HasColumnType("int(11)");

                    b.Property<int>("TalentId")
                        .HasColumnName("TalentID")
                        .HasColumnType("int(11)");

                    b.HasKey("Character", "Build", "TalentId")
                        .HasName("PRIMARY");

                    b.ToTable("missingtalents");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.MmrRecalc", b =>
                {
                    b.Property<int>("BattleNetRegionId")
                        .HasColumnName("BattleNetRegionID")
                        .HasColumnType("int");

                    b.Property<int>("GameMode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TipManual")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("TipOld")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("TipRecent")
                        .HasColumnType("timestamp");

                    b.HasKey("BattleNetRegionId", "GameMode")
                        .HasName("PRIMARY");

                    b.ToTable("mmrrecalc");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.MountInformation", b =>
                {
                    b.Property<string>("AttributeId")
                        .HasColumnType("varchar(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Franchise")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("AttributeId")
                        .HasName("PRIMARY");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Name_UNIQUE");

                    b.ToTable("mountinformation");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Net48User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<ulong>("AcceptedTos")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("acceptedTOS")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int?>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("admin")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("ApplicationId")
                        .HasColumnName("applicationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnName("expiration")
                        .HasColumnType("datetime");

                    b.Property<uint?>("FailedPasswordAnswerAttemptCount")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<uint?>("FailedPasswordAttemptCount")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAnonymous")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isAnonymous")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong>("IsBattleNetOauthAuthorized")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsBattleNetOAuthAuthorized")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("IsGroupFinderAuthorized3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("IsGroupFinderAuthorized4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("IsGroupFinderAuthorized5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<bool?>("IsLockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnName("lastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLockedOutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int?>("PlayerId")
                        .HasColumnName("playerID")
                        .HasColumnType("int");

                    b.Property<int>("Premium")
                        .HasColumnName("premium")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PremiumSupporterSince")
                        .HasColumnType("timestamp");

                    b.Property<string>("Resettoken")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("resettoken")
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Subscriptionid")
                        .HasColumnName("subscriptionid")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime?>("Tokengenerated")
                        .HasColumnName("tokengenerated")
                        .HasColumnType("datetime");

                    b.Property<string>("UserGuid")
                        .IsRequired()
                        .HasColumnName("userGUID")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("email_UNIQUE");

                    b.HasIndex("PlayerId")
                        .HasName("FK_player_idx");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("username_UNIQUE");

                    b.ToTable("net48_users");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlayerID")
                        .HasColumnType("int");

                    b.Property<int>("BattleNetId")
                        .HasColumnType("int");

                    b.Property<int>("BattleNetRegionId")
                        .HasColumnType("int");

                    b.Property<int>("BattleNetSubId")
                        .HasColumnType("int");

                    b.Property<int?>("BattleTag")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_as_ci");

                    b.Property<DateTime>("TimestampCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'2020-01-14 18:00:00'");

                    b.HasKey("PlayerId");

                    b.HasIndex("BattleNetId")
                        .HasName("IX_BattleNetId");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("BattleNetRegionId", "BattleNetSubId")
                        .HasName("IX_BattleNetRegionId_BattleNetSubId");

                    b.HasIndex("BattleNetRegionId", "PlayerId")
                        .HasName("IX_BattleNetRegionId_PlayerID");

                    b.HasIndex("BattleNetRegionId", "BattleNetSubId", "BattleNetId")
                        .IsUnique()
                        .HasName("Unique_BattleNet");

                    b.ToTable("player");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerAggregate", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("GameMode")
                        .HasColumnType("int(11)");

                    b.Property<int>("FavoriteCharacter")
                        .HasColumnType("int(11)");

                    b.Property<int>("GamesPlayedRecently")
                        .HasColumnType("int(11)");

                    b.Property<int>("GamesPlayedTotal")
                        .HasColumnType("int(11)");

                    b.Property<int>("GamesPlayedWithMmr")
                        .HasColumnName("GamesPlayedWithMMR")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("TimestampLastUpdated")
                        .HasColumnType("timestamp");

                    b.HasKey("PlayerId", "GameMode")
                        .HasName("PRIMARY");

                    b.HasIndex("FavoriteCharacter")
                        .HasName("FK_PlayerAggregate_LocalizationAlias_idx");

                    b.HasIndex("TimestampLastUpdated")
                        .HasName("IX_TimestampLastUpdated");

                    b.HasIndex("GameMode", "TimestampLastUpdated")
                        .HasName("IX_GameMode_TimestampLastUpdated");

                    b.ToTable("playeraggregate");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerAlt", b =>
                {
                    b.Property<int>("PlayerIdalt")
                        .HasColumnName("PlayerIDAlt")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerIdmain")
                        .HasColumnName("PlayerIDMain")
                        .HasColumnType("int(11)");

                    b.HasKey("PlayerIdalt")
                        .HasName("PRIMARY");

                    b.HasIndex("PlayerIdalt")
                        .HasName("FK_PlayerIDAlt_idx");

                    b.HasIndex("PlayerIdmain")
                        .HasName("FK_PlayerIDMain");

                    b.ToTable("playeralt");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerBanned", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.HasKey("PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("playerbanned");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerBannedLeaderboard", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.HasKey("PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("playerbannedleaderboard");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerDisableNameChange", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.HasKey("PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("playerdisablenamechange");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerMmrMilestoneV3", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("MilestoneDate")
                        .HasColumnType("date");

                    b.Property<int>("GameMode")
                        .HasColumnType("int(11)");

                    b.Property<double>("Mmrmean")
                        .HasColumnName("MMRMean")
                        .HasColumnType("double");

                    b.Property<int>("Mmrrating")
                        .HasColumnName("MMRRating")
                        .HasColumnType("int(11)");

                    b.Property<double>("MmrstandardDeviation")
                        .HasColumnName("MMRStandardDeviation")
                        .HasColumnType("double");

                    b.HasKey("PlayerId", "MilestoneDate", "GameMode")
                        .HasName("PRIMARY");

                    b.HasIndex("MilestoneDate")
                        .HasName("IX_MilestoneDate");

                    b.HasIndex("Mmrrating")
                        .HasName("IX_MMRRating");

                    b.HasIndex("GameMode", "MilestoneDate")
                        .HasName("IX_GameMode_MilestoneDate");

                    b.HasIndex("PlayerId", "MilestoneDate")
                        .HasName("IX_PlayerID_MilestoneDate");

                    b.ToTable("playermmrmilestonev3");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerMmrReset", b =>
                {
                    b.Property<DateTime>("ResetDate")
                        .HasColumnType("date");

                    b.Property<ulong>("IsClampOutliers")
                        .HasColumnType("bit(1)");

                    b.Property<double>("MmrmeanMultiplier")
                        .HasColumnName("MMRMeanMultiplier")
                        .HasColumnType("double");

                    b.Property<double>("MmrstandardDeviationGapMultiplier")
                        .HasColumnName("MMRStandardDeviationGapMultiplier")
                        .HasColumnType("double");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("ResetDate")
                        .HasName("PRIMARY");

                    b.ToTable("playermmrreset");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PremiumPayment", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnName("TransactionID")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ItemTitle")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("PaymentAmountFee")
                        .HasColumnType("decimal(15,4)");

                    b.Property<decimal>("PaymentAmountGross")
                        .HasColumnType("decimal(15,4)");

                    b.Property<DateTime>("TimestampPayment")
                        .HasColumnType("timestamp");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex("Email")
                        .HasName("IX_Email");

                    b.ToTable("premiumpayment");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Replay", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("GameMode")
                        .HasColumnType("int(11)");

                    b.Property<string>("Hotsapifingerprint")
                        .HasColumnName("HOTSAPIFingerprint")
                        .HasColumnType("varchar(36)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MapId")
                        .HasColumnName("MapID")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReplayBuild")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("ReplayHash")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .IsFixedLength(true)
                        .HasMaxLength(16);

                    b.Property<TimeSpan>("ReplayLength")
                        .HasColumnType("time");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("TimestampReplay")
                        .HasColumnType("timestamp");

                    b.HasKey("ReplayId");

                    b.HasIndex("GameMode")
                        .HasName("IX_GameMode");

                    b.HasIndex("MapId")
                        .HasName("IX_MapID");

                    b.HasIndex("ReplayHash")
                        .IsUnique()
                        .HasName("ReplayHash_UNIQUE");

                    b.HasIndex("TimestampCreated")
                        .HasName("IX_TimestampCreated");

                    b.HasIndex("TimestampReplay")
                        .HasName("IX_TimestampReplay");

                    b.HasIndex("GameMode", "TimestampReplay")
                        .HasName("IX_GameMode_TimestampReplay");

                    b.HasIndex("ReplayBuild", "TimestampReplay")
                        .HasName("IX_ReplayBuild_TimestampReplay");

                    b.HasIndex("GameMode", "TimestampReplay", "ReplayId")
                        .HasName("IX_GameMode_TimestampReplay_ReplayID");

                    b.ToTable("replay");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacter", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharacterId")
                        .HasColumnName("CharacterID")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharacterLevel")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsAutoSelect")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsWinner")
                        .HasColumnType("bit(1)");

                    b.Property<int?>("Mmrbefore")
                        .HasColumnName("MMRBefore")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Mmrchange")
                        .HasColumnName("MMRChange")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId", "PlayerId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasName("FK_ReplayCharacter_LocalizationAlias_idx");

                    b.HasIndex("IsWinner")
                        .HasName("IX_Character_IsWinner");

                    b.HasIndex("Mmrbefore")
                        .HasName("IX_MMRBefore");

                    b.HasIndex("PlayerId")
                        .HasName("FK_ReplayCharacter_Player_idx");

                    b.HasIndex("ReplayId")
                        .HasName("FK_ReplayCharacter_Replay_idx");

                    b.HasIndex("CharacterId", "CharacterLevel")
                        .HasName("IX_CharacterID_CharacterLevel");

                    b.HasIndex("CharacterId", "IsWinner")
                        .HasName("IX_CharacterID_IsWinner");

                    b.HasIndex("ReplayId", "CharacterId")
                        .HasName("IX_ReplayID_CharacterID");

                    b.ToTable("replaycharacter");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterDraftOrder", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("DraftOrder")
                        .HasColumnType("int");

                    b.HasKey("ReplayId", "PlayerId")
                        .HasName("PRIMARY");

                    b.HasIndex("PlayerId")
                        .HasName("FK_ReplayCharacter_Player_idx");

                    b.HasIndex("ReplayId")
                        .HasName("FK_ReplayCharacter_Replay_idx");

                    b.ToTable("replaycharacterdraftorder");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterMatchAward", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("MatchAwardType")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId", "PlayerId", "MatchAwardType")
                        .HasName("PRIMARY");

                    b.HasIndex("MatchAwardType")
                        .HasName("IX_MatchAwardType");

                    b.HasIndex("PlayerId")
                        .HasName("IX_PlayerID");

                    b.HasIndex("ReplayId")
                        .HasName("IX_ReplayID");

                    b.HasIndex("PlayerId", "MatchAwardType")
                        .HasName("IX_PlayerID_MatchAwardType");

                    b.HasIndex("ReplayId", "PlayerId")
                        .HasName("IX_ReplayID_PlayerID");

                    b.ToTable("replaycharactermatchaward");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterProAssociation", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<string>("ProName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("ReplayId", "PlayerId")
                        .HasName("PRIMARY");

                    b.HasIndex("PlayerId")
                        .HasName("IX_PlayerID");

                    b.HasIndex("ReplayId")
                        .HasName("IX_ReplayID");

                    b.HasIndex("TeamId");

                    b.ToTable("replaycharacter_pro_association");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterScoreResult", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("Assists")
                        .HasColumnType("int(11)");

                    b.Property<int>("CreepDamage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("DamageTaken")
                        .HasColumnType("int(11)");

                    b.Property<int>("Deaths")
                        .HasColumnType("int(11)");

                    b.Property<int>("ExperienceContribution")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Healing")
                        .HasColumnType("int(11)");

                    b.Property<int>("HeroDamage")
                        .HasColumnType("int(11)");

                    b.Property<int?>("HighestKillStreak")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Level")
                        .HasColumnType("int(11)");

                    b.Property<int>("MercCampCaptures")
                        .HasColumnType("int(11)");

                    b.Property<int>("MetaExperience")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinionDamage")
                        .HasColumnType("int(11)");

                    b.Property<int>("SelfHealing")
                        .HasColumnType("int(11)");

                    b.Property<int>("SiegeDamage")
                        .HasColumnType("int(11)");

                    b.Property<int>("SoloKills")
                        .HasColumnType("int(11)");

                    b.Property<int>("StructureDamage")
                        .HasColumnType("int(11)");

                    b.Property<int>("SummonDamage")
                        .HasColumnType("int(11)");

                    b.Property<int>("Takedowns")
                        .HasColumnType("int(11)");

                    b.Property<TimeSpan?>("TimeCcdEnemyHeroes")
                        .HasColumnName("TimeCCdEnemyHeroes")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TimeSpentDead")
                        .HasColumnType("time");

                    b.Property<int>("TownKills")
                        .HasColumnType("int(11)");

                    b.Property<int>("WatchTowerCaptures")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId", "PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("replaycharacterscoreresult");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterSilenced", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId", "PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("replaycharactersilenced");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterTalent", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("TalentId")
                        .HasColumnName("TalentID")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId", "PlayerId", "TalentId")
                        .HasName("PRIMARY");

                    b.HasIndex("PlayerId")
                        .HasName("IX_PlayerID");

                    b.HasIndex("ReplayId")
                        .HasName("IX_ReplayID");

                    b.HasIndex("ReplayId", "PlayerId")
                        .HasName("IX_ReplayID_PlayerID");

                    b.ToTable("replaycharactertalent");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterUpgradeEventReplayLengthPercent", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("UpgradeEventType")
                        .HasColumnType("int(11)");

                    b.Property<int>("UpgradeEventValue")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("ReplayLengthPercent")
                        .HasColumnType("decimal(15,13)");

                    b.HasKey("ReplayId", "PlayerId", "UpgradeEventType", "UpgradeEventValue")
                        .HasName("PRIMARY");

                    b.HasIndex("UpgradeEventType")
                        .HasName("IX_UpgradeEventType");

                    b.HasIndex("UpgradeEventType", "UpgradeEventValue")
                        .HasName("IX_UpgradeEventType_UpgradeEventValue");

                    b.ToTable("replaycharacterupgradeeventreplaylengthpercent");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayDup", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("GameMode")
                        .HasColumnType("int(11)");

                    b.Property<string>("Hotsapifingerprint")
                        .HasColumnName("HOTSAPIFingerprint")
                        .HasColumnType("varchar(36)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MapId")
                        .HasColumnName("MapID")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReplayBuild")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("ReplayHash")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .IsFixedLength(true)
                        .HasMaxLength(16);

                    b.Property<TimeSpan>("ReplayLength")
                        .HasColumnType("time");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("TimestampReplay")
                        .HasColumnType("timestamp");

                    b.HasKey("ReplayId")
                        .HasName("PRIMARY");

                    b.HasIndex("GameMode")
                        .HasName("IX_GameMode");

                    b.HasIndex("MapId")
                        .HasName("IX_MapID");

                    b.HasIndex("ReplayHash")
                        .IsUnique()
                        .HasName("ReplayHash_UNIQUE");

                    b.HasIndex("TimestampCreated")
                        .HasName("IX_TimestampCreated");

                    b.HasIndex("TimestampReplay")
                        .HasName("IX_TimestampReplay");

                    b.HasIndex("GameMode", "TimestampReplay")
                        .HasName("IX_GameMode_TimestampReplay");

                    b.HasIndex("ReplayBuild", "TimestampReplay")
                        .HasName("IX_ReplayBuild_TimestampReplay");

                    b.HasIndex("GameMode", "TimestampReplay", "ReplayId")
                        .HasName("IX_GameMode_TimestampReplay_ReplayID");

                    b.ToTable("replay_dups");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayDups2", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("DupOfReplayId")
                        .HasColumnName("DupOfReplayID")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId")
                        .HasName("PRIMARY");

                    b.ToTable("replay_dups2");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayMirror", b =>
                {
                    b.Property<int>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplayID")
                        .HasColumnType("int");

                    b.HasKey("ReplayId")
                        .HasName("PRIMARY");

                    b.ToTable("replay_mirror");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayNoTalent", b =>
                {
                    b.Property<int>("GameMode")
                        .HasColumnType("int");

                    b.Property<string>("Hotsapifingerprint")
                        .HasColumnName("HOTSAPIFingerprint")
                        .HasColumnType("varchar(36)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MapId")
                        .HasColumnName("MapID")
                        .HasColumnType("int");

                    b.Property<int>("ReplayBuild")
                        .HasColumnType("int");

                    b.Property<byte[]>("ReplayHash")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .IsFixedLength(true)
                        .HasMaxLength(16);

                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ReplayLength")
                        .HasColumnType("time");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("TimestampReplay")
                        .HasColumnType("timestamp");

                    b.ToTable("replay_notalents");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayPeriodicXpBreakdown", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsWinner")
                        .HasColumnType("bit(1)");

                    b.Property<int>("GameTimeMinute")
                        .HasColumnType("int(11)");

                    b.Property<int>("CreepXp")
                        .HasColumnName("CreepXP")
                        .HasColumnType("int(11)");

                    b.Property<int>("HeroXp")
                        .HasColumnName("HeroXP")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinionXp")
                        .HasColumnName("MinionXP")
                        .HasColumnType("int(11)");

                    b.Property<int>("StructureXp")
                        .HasColumnName("StructureXP")
                        .HasColumnType("int(11)");

                    b.Property<int>("TrickleXp")
                        .HasColumnName("TrickleXP")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId", "IsWinner", "GameTimeMinute")
                        .HasName("PRIMARY");

                    b.HasIndex("ReplayId")
                        .HasName("IX_ReplayID");

                    b.HasIndex("IsWinner", "GameTimeMinute")
                        .HasName("IX_IsWinner_GameTimeMinute");

                    b.ToTable("replayperiodicxpbreakdown");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayPlayerTalentBuild", b =>
                {
                    b.Property<int>("Replayid")
                        .HasColumnName("replayid")
                        .HasColumnType("int");

                    b.Property<int>("Playerid")
                        .HasColumnName("playerid")
                        .HasColumnType("int");

                    b.Property<string>("Talentselection")
                        .IsRequired()
                        .HasColumnName("talentselection")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Replayid", "Playerid")
                        .HasName("PRIMARY");

                    b.ToTable("replay_playertalentbuilds");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayShare", b =>
                {
                    b.Property<int>("ReplayShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReplayShareID")
                        .HasColumnType("int(11)");

                    b.Property<string>("AlteredReplayFileName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PlayerIdsharedBy")
                        .HasColumnName("PlayerIDSharedBy")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("UpvoteScore")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayShareId");

                    b.HasIndex("PlayerIdsharedBy")
                        .HasName("FK_ReplayShare_Player_idx");

                    b.HasIndex("ReplayId")
                        .HasName("FK_ReplayShare_Replay_idx");

                    b.HasIndex("Title")
                        .HasName("IX_Title");

                    b.HasIndex("UpvoteScore")
                        .HasName("IX_UpvoteScore");

                    b.HasIndex("UpvoteScore", "Title")
                        .HasName("IX_UpvoteScore_Title");

                    b.ToTable("replayshare");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayTeamHeroBan", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharacterId")
                        .HasColumnName("CharacterID")
                        .HasColumnType("int(11)");

                    b.Property<int>("BanPhase")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsWinner")
                        .HasColumnType("bit(1)");

                    b.HasKey("ReplayId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasName("IX_CharacterID");

                    b.HasIndex("IsWinner")
                        .HasName("IX_IsWinner");

                    b.HasIndex("ReplayId", "IsWinner")
                        .HasName("IX_ReplayID_IsWinner");

                    b.ToTable("replayteamheroban");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayTeamObjective", b =>
                {
                    b.Property<int>("ReplayId")
                        .HasColumnName("ReplayID")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsWinner")
                        .HasColumnType("bit(1)");

                    b.Property<int>("TeamObjectiveType")
                        .HasColumnType("int(11)");

                    b.Property<TimeSpan>("TimeSpan")
                        .HasColumnType("time");

                    b.Property<int?>("PlayerId")
                        .HasColumnName("PlayerID")
                        .HasColumnType("int(11)");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)");

                    b.HasKey("ReplayId", "IsWinner", "TeamObjectiveType", "TimeSpan")
                        .HasName("PRIMARY");

                    b.HasIndex("PlayerId")
                        .HasName("IX_PlayerID");

                    b.HasIndex("TeamObjectiveType")
                        .HasName("IX_TeamObjectiveType");

                    b.ToTable("replayteamobjective");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Reputation", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Reputation1")
                        .HasColumnName("Reputation")
                        .HasColumnType("int");

                    b.HasKey("PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("reputation");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.TalentImageMapping", b =>
                {
                    b.Property<string>("TalentName")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("HeroName")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Character")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TalentImage")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("TalentName", "HeroName")
                        .HasName("PRIMARY");

                    b.HasIndex("TalentName", "HeroName")
                        .IsUnique()
                        .HasName("idx_talentimagemapping_TalentName_HeroName");

                    b.ToTable("talentimagemapping");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("EntryFee")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("IsPublic")
                        .HasColumnType("int");

                    b.Property<int?>("MaxNumTeams")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TournamentDescription")
                        .HasColumnType("text");

                    b.Property<string>("TournamentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TournamentId");

                    b.ToTable("tournament");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.TournamentMatchDB", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("MatchDeadline")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("MatchTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ReplayId")
                        .HasColumnType("int");

                    b.Property<int>("RoundNum")
                        .HasColumnType("int");

                    b.Property<int>("Team1Id")
                        .HasColumnType("int");

                    b.Property<int>("Team2Id")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("WinningTeamId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.ToTable("tournament_match");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.TournamentParticipant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Battletag")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId");

                    b.ToTable("tournament_participant");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.TournamentTeamDB", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CaptainEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IsPaid")
                        .HasColumnType("int");

                    b.Property<string>("PaypalEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TeamName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.ToTable("tournament_team");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.UnknownDatum", b =>
                {
                    b.Property<string>("UnknownData")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_bin");

                    b.HasKey("UnknownData")
                        .HasName("PRIMARY");

                    b.ToTable("unknowndata");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TargetPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TargetReplayId")
                        .HasColumnType("int");

                    b.Property<ulong?>("Up")
                        .HasColumnType("bit(1)");

                    b.Property<int>("VotingPlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("votes");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ZamUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("varchar(36)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int?>("IsHotslogsPremiumConverted")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("PremiumExpiration")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimestampLastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("email_UNIQUE");

                    b.ToTable("zamuser");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Event", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Event", "EventIdparentNavigation")
                        .WithMany("InverseEventIdparentNavigation")
                        .HasForeignKey("EventIdparent")
                        .HasConstraintName("FK_EventIDParent_EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.EventTeam", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Event", "Event")
                        .WithMany("Teams")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.GroupFinderListing", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithOne("GroupFinderListing")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.GroupFinderListing", "PlayerId")
                        .HasConstraintName("FK_GroupFinderListing_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.LeaderboardOptOut", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithOne("LeaderboardOptOut")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.LeaderboardOptOut", "PlayerId")
                        .HasConstraintName("FK_LeaderboardOptOut_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.LeaderboardRanking", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.League", "League")
                        .WithMany("LeaderboardRankings")
                        .HasForeignKey("LeagueId")
                        .HasConstraintName("FK_LeaderboardRanking_League")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("LeaderboardRankings")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_LeaderboardRanking_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.LogError", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Net48User", "User")
                        .WithMany("LogErrors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LogError_my_aspnet_users")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Net48User", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("Net48Users")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_player");
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerAggregate", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.LocalizationAlias", "FavoriteCharacterNavigation")
                        .WithMany("PlayerAggregates")
                        .HasForeignKey("FavoriteCharacter")
                        .HasConstraintName("FK_PlayerAggregate_LocalizationAlias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("PlayerAggregates")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_PlayerAggregate_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerAlt", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "PlayerIdaltNavigation")
                        .WithOne("PlayerAltPlayerIdaltNavigation")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.PlayerAlt", "PlayerIdalt")
                        .HasConstraintName("FK_PlayerIDAlt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "PlayerIdmainNavigation")
                        .WithMany("PlayerAltPlayerIdmainNavigations")
                        .HasForeignKey("PlayerIdmain")
                        .HasConstraintName("FK_PlayerIDMain")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerBanned", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithOne("PlayerBanned")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.PlayerBanned", "PlayerId")
                        .HasConstraintName("FK_PlayerBanned_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerBannedLeaderboard", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithOne("PlayerBannedLeaderboard")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.PlayerBannedLeaderboard", "PlayerId")
                        .HasConstraintName("FK_PlayerBannedLeaderboard_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerDisableNameChange", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithOne("PlayerDisableNameChange")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.PlayerDisableNameChange", "PlayerId")
                        .HasConstraintName("FK_PlayerDisableNameChange_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.PlayerMmrMilestoneV3", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("PlayerMmrMilestoneV3s")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_PlayerMMRMilestoneV3_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacter", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("ReplayCharacters")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_ReplayCharacter_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayCharacters")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_ReplayCharacter_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterDraftOrder", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("ReplayCharacterDraftOrders")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_ReplayCharacterDraftOrder_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayCharacterDraftOrders")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_ReplayCharacterDraftOrder_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.ReplayCharacter", "ReplayCharacter")
                        .WithOne("ReplayCharacterDraftOrder")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.ReplayCharacterDraftOrder", "ReplayId", "PlayerId")
                        .HasConstraintName("FK_ReplayCharacterDraftOrder_ReplayCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterMatchAward", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("ReplayCharacterMatchAwards")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_ReplayCharacterMatchAward_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayCharacterMatchAwards")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_ReplayCharacterMatchAward_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.ReplayCharacter", "ReplayCharacter")
                        .WithMany("ReplayCharacterMatchAwards")
                        .HasForeignKey("ReplayId", "PlayerId")
                        .HasConstraintName("FK_ReplayCharacterMatchAward_ReplayCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterProAssociation", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("ReplayCharacterProAssociations")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayCharacterProAssociations")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.EventTeam", "Team")
                        .WithMany("ReplayCharacterProAssociations")
                        .HasForeignKey("TeamId");

                    b.HasOne("Heroes.DataAccessLayer.Models.ReplayCharacter", "ReplayCharacter")
                        .WithOne("ReplayCharacterProAssociation")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.ReplayCharacterProAssociation", "ReplayId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterScoreResult", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.ReplayCharacter", "ReplayCharacter")
                        .WithOne("ReplayCharacterScoreResult")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.ReplayCharacterScoreResult", "ReplayId", "PlayerId")
                        .HasConstraintName("FK_ReplayCharacterScoreResult_ReplayCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterSilenced", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.ReplayCharacter", "ReplayCharacter")
                        .WithOne("ReplayCharacterSilenced")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.ReplayCharacterSilenced", "ReplayId", "PlayerId")
                        .HasConstraintName("FK_ReplayCharacterSilenced_ReplayCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterTalent", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("ReplayCharacterTalents")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_ReplayCharacterTalent_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayCharacterTalents")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_ReplayCharacterTalent_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.ReplayCharacter", "ReplayCharacter")
                        .WithMany("ReplayCharacterTalents")
                        .HasForeignKey("ReplayId", "PlayerId")
                        .HasConstraintName("FK_ReplayCharacterTalent_ReplayCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayCharacterUpgradeEventReplayLengthPercent", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.ReplayCharacter", "ReplayCharacter")
                        .WithMany("ReplayCharacterUpgradeEventReplayLengthPercents")
                        .HasForeignKey("ReplayId", "PlayerId")
                        .HasConstraintName("FK_this_ReplayCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayPeriodicXpBreakdown", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayPeriodicXpBreakdowns")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_ReplayPeriodicXPBreakdown_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayShare", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "PlayerIdsharedByNavigation")
                        .WithMany("ReplayShares")
                        .HasForeignKey("PlayerIdsharedBy")
                        .HasConstraintName("FK_ReplayShare_Player")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayShares")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_ReplayShare_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayTeamHeroBan", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayTeamHeroBans")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_ReplayTeamHeroBan_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.ReplayTeamObjective", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithMany("ReplayTeamObjectives")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_this_Player")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Heroes.DataAccessLayer.Models.Replay", "Replay")
                        .WithMany("ReplayTeamObjectives")
                        .HasForeignKey("ReplayId")
                        .HasConstraintName("FK_this_Replay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heroes.DataAccessLayer.Models.Reputation", b =>
                {
                    b.HasOne("Heroes.DataAccessLayer.Models.Player", "Player")
                        .WithOne("Reputation")
                        .HasForeignKey("Heroes.DataAccessLayer.Models.Reputation", "PlayerId")
                        .HasConstraintName("FK_Players")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
