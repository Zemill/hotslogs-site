// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Heroes.DataAccessLayer.Models;

namespace Heroes.DataAccessLayer.Data
{
    public partial class HeroesdataContext : DbContext
    {
        public HeroesdataContext(DbContextOptions<HeroesdataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AmazonReplacementBucket> AmazonReplacementBuckets { get; set; }
        public virtual DbSet<BlogPost> BlogPosts { get; set; }
        public virtual DbSet<BuildNumber> BuildNumbers { get; set; }
        public virtual DbSet<DataUpdate> DataUpdates { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventTeam> EventTeams { get; set; }
        public virtual DbSet<FingerprintDate> FingerprintDates { get; set; }
        public virtual DbSet<GroupFinderListing> GroupFinderListings { get; set; }
        public virtual DbSet<HeroIconInformation> HeroIconInformations { get; set; }
        public virtual DbSet<HeroTalentInformation> HeroTalentInformations { get; set; }
        public virtual DbSet<HotsApiReplay> HotsApiReplays { get; set; }
        public virtual DbSet<HotsApiTalent> HotsApiTalents { get; set; }
        public virtual DbSet<LeaderboardOptOut> LeaderboardOptOuts { get; set; }
        public virtual DbSet<LeaderboardRanking> LeaderboardRankings { get; set; }
        public virtual DbSet<League> Leagues { get; set; }
        public virtual DbSet<LocalizationAlias> LocalizationAliases { get; set; }
        public virtual DbSet<LogError> LogErrors { get; set; }
        public virtual DbSet<MissingTalent> MissingTalents { get; set; }
        public virtual DbSet<MmrRecalc> MmrRecalcs { get; set; }
        public virtual DbSet<MountInformation> MountInformations { get; set; }
        public virtual DbSet<Net48User> Net48Users { get; set; }
        public virtual DbSet<Tournament> Tournament { get; set; }
        public virtual DbSet<TournamentTeamDB> TournamentTeamDB { get; set; }
        public virtual DbSet<TournamentMatchDB> TournamentMatch { get; set; }
        public virtual DbSet<TournamentParticipant> TournamentParticipant { get; set; }
        public virtual DbSet<Player> Players { get; set; }
        public virtual DbSet<PlayerAggregate> PlayerAggregates { get; set; }
        public virtual DbSet<PlayerAlt> PlayerAlts { get; set; }
        public virtual DbSet<PlayerBanned> PlayerBanneds { get; set; }
        public virtual DbSet<PlayerBannedLeaderboard> PlayerBannedLeaderboards { get; set; }
        public virtual DbSet<PlayerDisableNameChange> PlayerDisableNameChanges { get; set; }
        public virtual DbSet<PlayerMmrMilestoneV3> PlayerMmrMilestoneV3s { get; set; }
        public virtual DbSet<PlayerMmrReset> PlayerMmrResets { get; set; }
        public virtual DbSet<PremiumPayment> PremiumPayments { get; set; }
        public virtual DbSet<Replay> Replays { get; set; }
        public virtual DbSet<ReplayCharacter> ReplayCharacters { get; set; }
        public virtual DbSet<ReplayCharacterDraftOrder> ReplayCharacterDraftOrders { get; set; }
        public virtual DbSet<ReplayCharacterMatchAward> ReplayCharacterMatchAwards { get; set; }
        public virtual DbSet<ReplayCharacterProAssociation> ReplayCharacterProAssociations { get; set; }
        public virtual DbSet<ReplayCharacterScoreResult> ReplayCharacterScoreResults { get; set; }
        public virtual DbSet<ReplayCharacterSilenced> ReplayCharacterSilenceds { get; set; }
        public virtual DbSet<ReplayCharacterTalent> ReplayCharacterTalents { get; set; }
        public virtual DbSet<ReplayCharacterUpgradeEventReplayLengthPercent> ReplayCharacterUpgradeEventReplayLengthPercents { get; set; }
        public virtual DbSet<ReplayDup> ReplayDups { get; set; }
        public virtual DbSet<ReplayDups2> ReplayDups2s { get; set; }
        public virtual DbSet<ReplayMirror> ReplayMirrors { get; set; }
        public virtual DbSet<ReplayNoTalent> ReplayNoTalents { get; set; }
        public virtual DbSet<ReplayPeriodicXpBreakdown> ReplayPeriodicXpBreakdowns { get; set; }
        public virtual DbSet<ReplayPlayerTalentBuild> ReplayPlayerTalentBuilds { get; set; }
        public virtual DbSet<ReplayShare> ReplayShares { get; set; }
        public virtual DbSet<ReplayTeamHeroBan> ReplayTeamHeroBans { get; set; }
        public virtual DbSet<ReplayTeamObjective> ReplayTeamObjectives { get; set; }
        public virtual DbSet<Reputation> Reputations { get; set; }
        public virtual DbSet<TalentImageMapping> TalentImageMappings { get; set; }
        public virtual DbSet<UnknownDatum> UnknownData { get; set; }
        public virtual DbSet<Vote> Votes { get; set; }
        public virtual DbSet<ZamUser> ZamUsers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AmazonReplacementBucket>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<BlogPost>(entity =>
            {
                entity.Property(e => e.Content)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.CreateDate).HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Tags)
                    .HasDefaultValueSql("'@main@'")
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<BuildNumber>(entity =>
            {
                entity.HasKey(e => e.Buildnumber1)
                    .HasName("PRIMARY");

                entity.Property(e => e.Version)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<DataUpdate>(entity =>
            {
                entity.HasKey(e => e.DataEvent)
                    .HasName("PRIMARY");

                entity.Property(e => e.DataEvent)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Event>(entity =>
            {
                entity.HasIndex(e => e.EventIdparent)
                    .HasDatabaseName("FK_EventIDParent_EventID_idx");

                entity.HasIndex(e => e.EventName)
                    .HasDatabaseName("EventName_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.EventName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.HasOne(d => d.EventIdparentNavigation)
                    .WithMany(p => p.InverseEventIdparentNavigation)
                    .HasForeignKey(d => d.EventIdparent)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EventIDParent_EventID");
            });

            modelBuilder.Entity<FingerprintDate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._725ba4982728D326B6ac11129c55b212)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<GroupFinderListing>(entity =>
            {
                entity.HasKey(e => e.PlayerId)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.GroupFinderListingTypeId)
                    .HasDatabaseName("IX_GroupFinderListingTypeID");

                entity.HasIndex(e => e.TimestampExpiration)
                    .HasDatabaseName("IX_TimestampExpiration");

                entity.Property(e => e.Information)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.GroupFinderListing)
                    .HasForeignKey<GroupFinderListing>(d => d.PlayerId)
                    .HasConstraintName("FK_GroupFinderListing_Player");
            });

            modelBuilder.Entity<HeroIconInformation>(entity =>
            {
                entity.HasKey(e => e.Pkid)
                    .HasName("PRIMARY");

                entity.Property(e => e.Icon)
                    .HasDefaultValueSql("'~/Images/Heroes/Portraits/AutoSelect.png'")
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<HeroTalentInformation>(entity =>
            {
                entity.HasKey(e => new { e.Character, e.ReplayBuildFirst, e.TalentId })
                    .HasName("PRIMARY");

                entity.HasIndex(e => new { e.Character, e.ReplayBuildFirst })
                    .HasDatabaseName("IX_Character_ReplayBuildFirst");

                entity.HasIndex(e => new { e.Character, e.TalentId })
                    .HasDatabaseName("IX_Character_TalentID");

                entity.HasIndex(e => new { e.ReplayBuildFirst, e.ReplayBuildLast })
                    .HasDatabaseName("IX_ReplayBuildFirst_ReplayBuildLast");

                entity.HasIndex(e => new { e.Character, e.ReplayBuildFirst, e.ReplayBuildLast })
                    .HasDatabaseName("IX_Character_ReplayBuildFirst_ReplayBuildLast");

                entity.Property(e => e.Character)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.TalentDescription)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.TalentName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<HotsApiReplay>(entity =>
            {
                entity.HasIndex(e => e.CreatedAt)
                    .HasDatabaseName("replays_created_at_index");

                entity.HasIndex(e => e.Filename)
                    .HasDatabaseName("replays_filename_unique")
                    .IsUnique();

                entity.HasIndex(e => e.Fingerprint)
                    .HasDatabaseName("replays_fingerprint_v3_index")
                    .IsUnique();

                entity.HasIndex(e => e.GameDate)
                    .HasDatabaseName("replays_game_date_index");

                entity.HasIndex(e => e.GameType)
                    .HasDatabaseName("replays_game_type_index");

                entity.HasIndex(e => e.ParsedId)
                    .HasDatabaseName("replays_parsed_id_uindex")
                    .IsUnique();

                entity.HasIndex(e => new { e.Processed, e.Deleted })
                    .HasDatabaseName("replays_processed_deleted_index");

                entity.Property(e => e.Filename)
                    .HasCharSet("utf8mb4")
                    .UseCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.Fingerprint)
                    .HasCharSet("utf8mb4")
                    .UseCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.GameType)
                    .HasCharSet("utf8mb4")
                    .UseCollation("utf8mb4_0900_ai_ci");

                entity.Property(e => e.GameVersion)
                    .HasCharSet("utf8mb4")
                    .UseCollation("utf8mb4_0900_ai_ci");
            });

            modelBuilder.Entity<HotsApiTalent>(entity =>
            {
                entity.HasKey(e => e.Pkid)
                    .HasName("PRIMARY");

                entity.Property(e => e.Description)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Hero)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Level).HasDefaultValueSql("'1'");

                entity.Property(e => e.Name)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Title)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<LeaderboardOptOut>(entity =>
            {
                entity.HasKey(e => e.PlayerId)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.LeaderboardOptOut)
                    .HasForeignKey<LeaderboardOptOut>(d => d.PlayerId)
                    .HasConstraintName("FK_LeaderboardOptOut_Player");
            });

            modelBuilder.Entity<LeaderboardRanking>(entity =>
            {
                entity.HasKey(e => new { e.PlayerId, e.GameMode })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.IsEligibleForLeaderboard)
                    .HasDatabaseName("IX_IsEligibleForLeaderboard");

                entity.HasIndex(e => e.LeagueId)
                    .HasDatabaseName("IX_LeagueID");

                entity.HasIndex(e => new { e.GameMode, e.CurrentMmr })
                    .HasDatabaseName("IX_GameMode_CurrentMMR");

                entity.HasIndex(e => new { e.LeagueId, e.LeagueRank })
                    .HasDatabaseName("IX_LeagueID_LeagueRank");

                entity.HasIndex(e => new { e.GameMode, e.LeagueId, e.LeagueRank })
                    .HasDatabaseName("IX_GameMode_LeagueID_LeagueRank");

                entity.Property(e => e.IsEligibleForLeaderboard).HasDefaultValueSql("b'0'");

                entity.HasOne(d => d.League)
                    .WithMany(p => p.LeaderboardRankings)
                    .HasForeignKey(d => d.LeagueId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LeaderboardRanking_League");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.LeaderboardRankings)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_LeaderboardRanking_Player");
            });

            modelBuilder.Entity<League>(entity =>
            {
                entity.Property(e => e.LeagueName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<LocalizationAlias>(entity =>
            {
                entity.HasKey(e => e.IdentifierId)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.AttributeName)
                    .HasDatabaseName("AttributeName_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.Group)
                    .HasDatabaseName("IX_Group");

                entity.HasIndex(e => e.Type)
                    .HasDatabaseName("IX_Type");

                entity.Property(e => e.AliasesCsv)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.AttributeName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Group)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.NewGroup)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.PrimaryName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.SubGroup)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<LogError>(entity =>
            {
                entity.HasIndex(e => e.DateTimeErrorOccurred)
                    .HasDatabaseName("IX_DateTimeErrorOccurred");

                entity.HasIndex(e => e.UserHostAddress)
                    .HasDatabaseName("IX_UserHostAddress");

                entity.HasIndex(e => e.UserId)
                    .HasDatabaseName("FK_LogError_my_aspnet_users_idx");

                entity.Property(e => e.AbsoluteUri)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.DateTimeErrorOccurred).HasDefaultValueSql("'2020-01-20 13:27:33'");

                entity.Property(e => e.ErrorMessage)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Referer)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_bin");

                entity.Property(e => e.UserAgent)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.UserHostAddress)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LogErrors)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LogError_my_aspnet_users");
            });

            modelBuilder.Entity<MissingTalent>(entity =>
            {
                entity.HasKey(e => new { e.Character, e.Build, e.TalentId })
                    .HasName("PRIMARY");

                entity.Property(e => e.Character)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<MmrRecalc>(entity =>
            {
                entity.HasKey(e => new { e.BattleNetRegionId, e.GameMode })
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<MountInformation>(entity =>
            {
                entity.HasKey(e => e.AttributeId)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.Name)
                    .HasDatabaseName("Name_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.AttributeId)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Description)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Franchise)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Net48User>(entity =>
            {
                entity.HasIndex(e => e.Email)
                    .HasDatabaseName("email_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.PlayerId)
                    .HasDatabaseName("FK_player_idx");

                entity.HasIndex(e => e.Username)
                    .HasDatabaseName("username_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.AcceptedTos).HasDefaultValueSql("b'0'");

                entity.Property(e => e.Admin).HasDefaultValueSql("'0'");

                entity.Property(e => e.Email)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.IsAnonymous).HasDefaultValueSql("'1'");

                entity.Property(e => e.IsBattleNetOauthAuthorized).HasDefaultValueSql("b'0'");

                entity.Property(e => e.IsGroupFinderAuthorized3).HasDefaultValueSql("b'1'");

                entity.Property(e => e.IsGroupFinderAuthorized4).HasDefaultValueSql("b'1'");

                entity.Property(e => e.IsGroupFinderAuthorized5).HasDefaultValueSql("b'1'");

                entity.Property(e => e.Password)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Resettoken)
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Subscriptionid)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.UserGuid)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Username)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Net48Users)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_player");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.HasIndex(e => e.BattleNetId)
                    .HasDatabaseName("IX_BattleNetId");

                entity.HasIndex(e => e.Name)
                    .HasDatabaseName("IX_Name");

                entity.HasIndex(e => new { e.BattleNetRegionId, e.BattleNetSubId })
                    .HasDatabaseName("IX_BattleNetRegionId_BattleNetSubId");

                entity.HasIndex(e => new { e.BattleNetRegionId, e.PlayerId })
                    .HasDatabaseName("IX_BattleNetRegionId_PlayerID");

                entity.HasIndex(e => new { e.BattleNetRegionId, e.BattleNetSubId, e.BattleNetId })
                    .HasDatabaseName("Unique_BattleNet")
                    .IsUnique();

                entity.Property(e => e.Name)
                    .HasCharSet("utf8mb4")
                    .UseCollation("utf8mb4_0900_as_ci");

                entity.Property(e => e.TimestampCreated).HasDefaultValueSql("'2020-01-14 18:00:00'");
            });

            modelBuilder.Entity<PlayerAggregate>(entity =>
            {
                entity.HasKey(e => new { e.PlayerId, e.GameMode })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.FavoriteCharacter)
                    .HasDatabaseName("FK_PlayerAggregate_LocalizationAlias_idx");

                entity.HasIndex(e => e.TimestampLastUpdated)
                    .HasDatabaseName("IX_TimestampLastUpdated");

                entity.HasIndex(e => new { e.GameMode, e.TimestampLastUpdated })
                    .HasDatabaseName("IX_GameMode_TimestampLastUpdated");

                entity.HasOne(d => d.FavoriteCharacterNavigation)
                    .WithMany(p => p.PlayerAggregates)
                    .HasForeignKey(d => d.FavoriteCharacter)
                    .HasConstraintName("FK_PlayerAggregate_LocalizationAlias");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PlayerAggregates)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_PlayerAggregate_Player");
            });

            modelBuilder.Entity<PlayerAlt>(entity =>
            {
                entity.HasKey(e => e.PlayerIdalt)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.PlayerIdalt)
                    .HasDatabaseName("FK_PlayerIDAlt_idx");

                entity.HasIndex(e => e.PlayerIdmain)
                    .HasDatabaseName("FK_PlayerIDMain");

                entity.HasOne(d => d.PlayerIdaltNavigation)
                    .WithOne(p => p.PlayerAltPlayerIdaltNavigation)
                    .HasForeignKey<PlayerAlt>(d => d.PlayerIdalt)
                    .HasConstraintName("FK_PlayerIDAlt");

                entity.HasOne(d => d.PlayerIdmainNavigation)
                    .WithMany(p => p.PlayerAltPlayerIdmainNavigations)
                    .HasForeignKey(d => d.PlayerIdmain)
                    .HasConstraintName("FK_PlayerIDMain");
            });

            modelBuilder.Entity<PlayerBanned>(entity =>
            {
                entity.HasKey(e => e.PlayerId)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.PlayerBanned)
                    .HasForeignKey<PlayerBanned>(d => d.PlayerId)
                    .HasConstraintName("FK_PlayerBanned_Player");
            });

            modelBuilder.Entity<PlayerBannedLeaderboard>(entity =>
            {
                entity.HasKey(e => e.PlayerId)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.PlayerBannedLeaderboard)
                    .HasForeignKey<PlayerBannedLeaderboard>(d => d.PlayerId)
                    .HasConstraintName("FK_PlayerBannedLeaderboard_Player");
            });

            modelBuilder.Entity<PlayerDisableNameChange>(entity =>
            {
                entity.HasKey(e => e.PlayerId)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.PlayerDisableNameChange)
                    .HasForeignKey<PlayerDisableNameChange>(d => d.PlayerId)
                    .HasConstraintName("FK_PlayerDisableNameChange_Player");
            });

            modelBuilder.Entity<PlayerMmrMilestoneV3>(entity =>
            {
                entity.HasKey(e => new { e.PlayerId, e.MilestoneDate, e.GameMode })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.MilestoneDate)
                    .HasDatabaseName("IX_MilestoneDate");

                entity.HasIndex(e => e.Mmrrating)
                    .HasDatabaseName("IX_MMRRating");

                entity.HasIndex(e => new { e.GameMode, e.MilestoneDate })
                    .HasDatabaseName("IX_GameMode_MilestoneDate");

                entity.HasIndex(e => new { e.PlayerId, e.MilestoneDate })
                    .HasDatabaseName("IX_PlayerID_MilestoneDate");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PlayerMmrMilestoneV3s)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_PlayerMMRMilestoneV3_Player");
            });

            modelBuilder.Entity<PlayerMmrReset>(entity =>
            {
                entity.HasKey(e => e.ResetDate)
                    .HasName("PRIMARY");

                entity.Property(e => e.Title)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<PremiumPayment>(entity =>
            {
                entity.HasKey(e => e.TransactionId)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.Email)
                    .HasDatabaseName("IX_Email");

                entity.Property(e => e.TransactionId)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Email)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.ItemTitle)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Replay>(entity =>
            {
                entity.HasIndex(e => e.GameMode)
                    .HasDatabaseName("IX_GameMode");

                entity.HasIndex(e => e.MapId)
                    .HasDatabaseName("IX_MapID");

                entity.HasIndex(e => e.ReplayHash)
                    .HasDatabaseName("ReplayHash_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.TimestampCreated)
                    .HasDatabaseName("IX_TimestampCreated");

                entity.HasIndex(e => e.TimestampReplay)
                    .HasDatabaseName("IX_TimestampReplay");

                entity.HasIndex(e => new { e.GameMode, e.TimestampReplay })
                    .HasDatabaseName("IX_GameMode_TimestampReplay");

                entity.HasIndex(e => new { e.ReplayBuild, e.TimestampReplay })
                    .HasDatabaseName("IX_ReplayBuild_TimestampReplay");

                entity.HasIndex(e => new { e.GameMode, e.TimestampReplay, e.ReplayId })
                    .HasDatabaseName("IX_GameMode_TimestampReplay_ReplayID");

                entity.Property(e => e.Hotsapifingerprint)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.ReplayHash).IsFixedLength();
            });

            modelBuilder.Entity<ReplayCharacter>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.CharacterId)
                    .HasDatabaseName("FK_ReplayCharacter_LocalizationAlias_idx");

                entity.HasIndex(e => e.IsWinner)
                    .HasDatabaseName("IX_Character_IsWinner");

                entity.HasIndex(e => e.Mmrbefore)
                    .HasDatabaseName("IX_MMRBefore");

                entity.HasIndex(e => e.PlayerId)
                    .HasDatabaseName("FK_ReplayCharacter_Player_idx");

                entity.HasIndex(e => e.ReplayId)
                    .HasDatabaseName("FK_ReplayCharacter_Replay_idx");

                entity.HasIndex(e => new { e.CharacterId, e.CharacterLevel })
                    .HasDatabaseName("IX_CharacterID_CharacterLevel");

                entity.HasIndex(e => new { e.CharacterId, e.IsWinner })
                    .HasDatabaseName("IX_CharacterID_IsWinner");

                entity.HasIndex(e => new { e.ReplayId, e.CharacterId })
                    .HasDatabaseName("IX_ReplayID_CharacterID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.ReplayCharacters)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_ReplayCharacter_Player");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayCharacters)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_ReplayCharacter_Replay");
            });

            modelBuilder.Entity<ReplayCharacterDraftOrder>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.PlayerId)
                    .HasDatabaseName("FK_ReplayCharacter_Player_idx");

                entity.HasIndex(e => e.ReplayId)
                    .HasDatabaseName("FK_ReplayCharacter_Replay_idx");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.ReplayCharacterDraftOrders)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_ReplayCharacterDraftOrder_Player");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayCharacterDraftOrders)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_ReplayCharacterDraftOrder_Replay");

                entity.HasOne(d => d.ReplayCharacter)
                    .WithOne(p => p.ReplayCharacterDraftOrder)
                    .HasForeignKey<ReplayCharacterDraftOrder>(d => new { d.ReplayId, d.PlayerId })
                    .HasConstraintName("FK_ReplayCharacterDraftOrder_ReplayCharacter");
            });

            modelBuilder.Entity<ReplayCharacterMatchAward>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId, e.MatchAwardType })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.MatchAwardType)
                    .HasDatabaseName("IX_MatchAwardType");

                entity.HasIndex(e => e.PlayerId)
                    .HasDatabaseName("IX_PlayerID");

                entity.HasIndex(e => e.ReplayId)
                    .HasDatabaseName("IX_ReplayID");

                entity.HasIndex(e => new { e.PlayerId, e.MatchAwardType })
                    .HasDatabaseName("IX_PlayerID_MatchAwardType");

                entity.HasIndex(e => new { e.ReplayId, e.PlayerId })
                    .HasDatabaseName("IX_ReplayID_PlayerID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.ReplayCharacterMatchAwards)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_ReplayCharacterMatchAward_Player");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayCharacterMatchAwards)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_ReplayCharacterMatchAward_Replay");

                entity.HasOne(d => d.ReplayCharacter)
                    .WithMany(p => p.ReplayCharacterMatchAwards)
                    .HasForeignKey(d => new { d.ReplayId, d.PlayerId })
                    .HasConstraintName("FK_ReplayCharacterMatchAward_ReplayCharacter");
            });

            modelBuilder.Entity<ReplayCharacterProAssociation>(entity => {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.PlayerId)
                    .HasDatabaseName("IX_PlayerID");

                entity.HasIndex(e => e.ReplayId)
                    .HasDatabaseName("IX_ReplayID");
            });

            modelBuilder.Entity<ReplayCharacterScoreResult>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId })
                    .HasName("PRIMARY");

                entity.HasOne(d => d.ReplayCharacter)
                    .WithOne(p => p.ReplayCharacterScoreResult)
                    .HasForeignKey<ReplayCharacterScoreResult>(d => new { d.ReplayId, d.PlayerId })
                    .HasConstraintName("FK_ReplayCharacterScoreResult_ReplayCharacter");
            });

            modelBuilder.Entity<ReplayCharacterSilenced>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId })
                    .HasName("PRIMARY");

                entity.HasOne(d => d.ReplayCharacter)
                    .WithOne(p => p.ReplayCharacterSilenced)
                    .HasForeignKey<ReplayCharacterSilenced>(d => new { d.ReplayId, d.PlayerId })
                    .HasConstraintName("FK_ReplayCharacterSilenced_ReplayCharacter");
            });

            modelBuilder.Entity<ReplayCharacterTalent>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId, e.TalentId })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.PlayerId)
                    .HasDatabaseName("IX_PlayerID");

                entity.HasIndex(e => e.ReplayId)
                    .HasDatabaseName("IX_ReplayID");

                entity.HasIndex(e => new { e.ReplayId, e.PlayerId })
                    .HasDatabaseName("IX_ReplayID_PlayerID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.ReplayCharacterTalents)
                    .HasForeignKey(d => d.PlayerId)
                    .HasConstraintName("FK_ReplayCharacterTalent_Player");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayCharacterTalents)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_ReplayCharacterTalent_Replay");

                entity.HasOne(d => d.ReplayCharacter)
                    .WithMany(p => p.ReplayCharacterTalents)
                    .HasForeignKey(d => new { d.ReplayId, d.PlayerId })
                    .HasConstraintName("FK_ReplayCharacterTalent_ReplayCharacter");
            });

            modelBuilder.Entity<ReplayCharacterUpgradeEventReplayLengthPercent>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.PlayerId, e.UpgradeEventType, e.UpgradeEventValue })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.UpgradeEventType)
                    .HasDatabaseName("IX_UpgradeEventType");

                entity.HasIndex(e => new { e.UpgradeEventType, e.UpgradeEventValue })
                    .HasDatabaseName("IX_UpgradeEventType_UpgradeEventValue");

                entity.HasOne(d => d.ReplayCharacter)
                    .WithMany(p => p.ReplayCharacterUpgradeEventReplayLengthPercents)
                    .HasForeignKey(d => new { d.ReplayId, d.PlayerId })
                    .HasConstraintName("FK_this_ReplayCharacter");
            });

            modelBuilder.Entity<ReplayDup>(entity =>
            {
                entity.HasKey(e => e.ReplayId)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.GameMode)
                    .HasDatabaseName("IX_GameMode");

                entity.HasIndex(e => e.MapId)
                    .HasDatabaseName("IX_MapID");

                entity.HasIndex(e => e.ReplayHash)
                    .HasDatabaseName("ReplayHash_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.TimestampCreated)
                    .HasDatabaseName("IX_TimestampCreated");

                entity.HasIndex(e => e.TimestampReplay)
                    .HasDatabaseName("IX_TimestampReplay");

                entity.HasIndex(e => new { e.GameMode, e.TimestampReplay })
                    .HasDatabaseName("IX_GameMode_TimestampReplay");

                entity.HasIndex(e => new { e.ReplayBuild, e.TimestampReplay })
                    .HasDatabaseName("IX_ReplayBuild_TimestampReplay");

                entity.HasIndex(e => new { e.GameMode, e.TimestampReplay, e.ReplayId })
                    .HasDatabaseName("IX_GameMode_TimestampReplay_ReplayID");

                entity.Property(e => e.Hotsapifingerprint)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.ReplayHash).IsFixedLength();
            });

            modelBuilder.Entity<ReplayDups2>(entity =>
            {
                entity.HasKey(e => e.ReplayId)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<ReplayMirror>(entity =>
            {
                entity.HasKey(e => e.ReplayId)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<ReplayNoTalent>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Hotsapifingerprint)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.ReplayHash).IsFixedLength();
            });

            modelBuilder.Entity<ReplayPeriodicXpBreakdown>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.IsWinner, e.GameTimeMinute })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.ReplayId)
                    .HasDatabaseName("IX_ReplayID");

                entity.HasIndex(e => new { e.IsWinner, e.GameTimeMinute })
                    .HasDatabaseName("IX_IsWinner_GameTimeMinute");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayPeriodicXpBreakdowns)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_ReplayPeriodicXPBreakdown_Replay");
            });

            modelBuilder.Entity<ReplayPlayerTalentBuild>(entity =>
            {
                entity.HasKey(e => new { e.Replayid, e.Playerid })
                    .HasName("PRIMARY");

                entity.Property(e => e.Talentselection)
                    .HasCharSet("utf8mb4")
                    .UseCollation("utf8mb4_0900_ai_ci");
            });

            modelBuilder.Entity<ReplayShare>(entity =>
            {
                entity.HasIndex(e => e.PlayerIdsharedBy)
                    .HasDatabaseName("FK_ReplayShare_Player_idx");

                entity.HasIndex(e => e.ReplayId)
                    .HasDatabaseName("FK_ReplayShare_Replay_idx");

                entity.HasIndex(e => e.Title)
                    .HasDatabaseName("IX_Title");

                entity.HasIndex(e => e.UpvoteScore)
                    .HasDatabaseName("IX_UpvoteScore");

                entity.HasIndex(e => new { e.UpvoteScore, e.Title })
                    .HasDatabaseName("IX_UpvoteScore_Title");

                entity.Property(e => e.AlteredReplayFileName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Description)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Title)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.HasOne(d => d.PlayerIdsharedByNavigation)
                    .WithMany(p => p.ReplayShares)
                    .HasForeignKey(d => d.PlayerIdsharedBy)
                    .HasConstraintName("FK_ReplayShare_Player");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayShares)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_ReplayShare_Replay");
            });

            modelBuilder.Entity<ReplayTeamHeroBan>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.CharacterId })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.CharacterId)
                    .HasDatabaseName("IX_CharacterID");

                entity.HasIndex(e => e.IsWinner)
                    .HasDatabaseName("IX_IsWinner");

                entity.HasIndex(e => new { e.ReplayId, e.IsWinner })
                    .HasDatabaseName("IX_ReplayID_IsWinner");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayTeamHeroBans)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_ReplayTeamHeroBan_Replay");
            });

            modelBuilder.Entity<ReplayTeamObjective>(entity =>
            {
                entity.HasKey(e => new { e.ReplayId, e.IsWinner, e.TeamObjectiveType, e.TimeSpan })
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.PlayerId)
                    .HasDatabaseName("IX_PlayerID");

                entity.HasIndex(e => e.TeamObjectiveType)
                    .HasDatabaseName("IX_TeamObjectiveType");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.ReplayTeamObjectives)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_this_Player");

                entity.HasOne(d => d.Replay)
                    .WithMany(p => p.ReplayTeamObjectives)
                    .HasForeignKey(d => d.ReplayId)
                    .HasConstraintName("FK_this_Replay");
            });

            modelBuilder.Entity<Reputation>(entity =>
            {
                entity.HasKey(e => e.PlayerId)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.Reputation)
                    .HasForeignKey<Reputation>(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Players");
            });

            modelBuilder.Entity<TalentImageMapping>(entity =>
            {
                entity.HasKey(e => new { e.TalentName, e.HeroName })
                    .HasName("PRIMARY");

                entity.HasIndex(e => new { e.TalentName, e.HeroName })
                    .HasDatabaseName("idx_talentimagemapping_TalentName_HeroName")
                    .IsUnique();

                entity.Property(e => e.TalentName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.HeroName)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Character)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.TalentImage)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            modelBuilder.Entity<UnknownDatum>(entity =>
            {
                entity.HasKey(e => e.UnknownData)
                    .HasName("PRIMARY");

                entity.Property(e => e.UnknownData)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_bin");
            });

            modelBuilder.Entity<ZamUser>(entity =>
            {
                entity.HasIndex(e => e.Email)
                    .HasDatabaseName("email_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Email)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Username)
                    .HasCharSet("utf8")
                    .UseCollation("utf8_general_ci");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder builder);
    }
}